***********************************************************************
*                                                                     *
* RACFXREF                                                            *
* --------    RACF RULE CHECKER AND CROSS-REFERENCE PROGRAM           *
*                                                                     *
*       THIS PROGRAM PRODUCES A CROSS REFERENCE OF WHAT RULES         *
*       EACH USER AND GROUP IS PERMITTED TO ACCESS.                   *
*                                                                     *
*       IT ALSO CHECKS TO SEE IF ANY MEMBER OF AN ACCESS LIST         *
*       IS NOT DEFINED TO RACF AS A USER OR GROUP.                    *
*                                                                     *
*       AN OPTIONAL PARM CAN BE SPECIFIED GIVING THE PREFIX OF        *
*       THE USERS AND GROUPS THAT ARE TO BE LISTED.                   *
*                                                                     *
*           EG PARM=C301                                              *
*                                                                     *
*       LISTS ONLY USERS AND GROUPS STARTING 'C301'                   *
*                                                                     *
*                                                                     *
* NOTE : THIS PROGRAM MUST BE LINKED AC=1 AND EXECUTED FROM AN        *
*        AUTHORISED LIBRARY WITH A LARGE REGION (>2048K)              *
*                                                                     *
*        AMODE=31 AND RMODE=24                                        *
*                                                                     *
*        TABLE 'GENTAB' WITHIN THIS PROGRAM CONTAINS THE NAMES OF     *
*        ALL GENERAL RULES THAT THIS PROGRAM WILL CROSS-REFERENCE.    *
*        IF YOU WISH, YOU MAY ADD SOME MORE.                          *
*                                                                     *
*                                                                     *
*  USER ABENDS                                                        *
*  ===========                                                        *
*                                                                     *
*             1 - LOGIC ERROR (DUPLICATE USER/GROUP ON RACF)          *
*             2 - TREE STORAGE FULL (TOO MANY USER/GROUP THINGIES)    *
*                                                                     *
*                                                                     *
*  HEALTH WARNING                                                     *
*  ==============                                                     *
*                                                                     *
*     THIS PROGRAM USES A NUMBER OF TABLES TO PERFORM ITS PROCESSING  *
*     THESE TABLES ARE ACQUIRED BOTH ABOVE AND BELOW THE LINE. THE    *
*     AMOUNT OF STORAGE USED IN EACH TABLE DEPENDS UPON THE NUMBER    *
*     OF USERS, RULES AND THE LENGTH OF ACCESS LISTS. THIS PROGRAM    *
*     (SORRY), DOES NOT CHECK TO SEE IF A TABLE FILLS UP, THIS CAN    *
*     CAUSE VARIOUS ABENDS - YOU HAVE BEEN WARNED.                    *
*                                                                     *
***********************************************************************
* AUTHOR : N.G. THOMAS (C) 1989 NUGGET SOFTWARE LTD                   *
***********************************************************************
         MACRO
&NAME    PERFORM &PROC,&NODE
&NAME    LA     R9,PER&SYSNDX
         STM    R8,R9,0(R2)
         LA     R2,8(R2)
         LR     R8,&NODE
         B      &PROC
PER&SYSNDX DS 0H
         MEND
         MACRO
&NAME    EXIT
         SH    R2,=H'8'
         LM    R8,R9,0(R2)
         BR    R9
         MEND
         MACRO
&NAME    SMODE &AM
         LCLC  &LAB
&LAB     SETC  'A'.'&SYSNDX'
         AIF   ('&NAME' EQ '').NOLAB
&NAME    DS    0H
.NOLAB   AIF   ('&AM' NE '24').S31
         L     R1,=A(&LAB)
         AGO   .BSM
.S31     L     R1,=A(X'80000000'+&LAB)
.BSM     ANOP
         BSM   R0,R1
&LAB     DS    0H
         MEND
         PRINT ON,NOGEN
RACFXREF AMODE 31
RACFXREF RMODE 24
RACFXREF CSECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
TREELEN  EQU   UGELEN*4000             TREE STORAGE LENGTH
WKALEN   EQU   30*1024                 WORK AREA LENGTH
RULARL   EQU   RULETL*20000            40,000 RULES ALLOWED (31 BIT)
RPLEN    EQU   12*32000                RULE POINTER STORAGE
STACKL   EQU   32000                   STACK LENGTH
         USING RACFXREF,R15            TEMP BASE
         STM   R14,R12,12(R13)         SAVE THE CALLERS REGS
         LA    R2,SAVEA                LOAD OUR SAVE AREA ADDRESS
         B     AROUND                  SKIP SAVE AREA ETC
SAVEA    DS    18F
         DC    CL8'RACFXREF'
AROUND   DS    0H
         ST    R13,4(R2)               CHAIN CALLERS SAVE AREA
         ST    R2,8(R13)               CHAIN OUR SAVE AREA
         LR    R13,R2                  MAKE SAVEAREA FEEL AT HOME
         LR    R10,R15                 PUT BASE ADDRESS IN R10
         DROP  R15
         USING RACFXREF,R10            R10 IS BASE REG NO. 1
         SPACE
***********************************************************************
* ISOLATE ANY PARM                                                    *
***********************************************************************
         SPACE
         L     R1,0(R1)                -> PARM STRING
         LH    R2,0(R1)                GET LENGTH
         STH   R2,PARML                SAVE FOR LATER
         LTR   R2,R2                   ANY PARM ?
         BZ    NOPARM                  NO
         BCTR  R2,0
         EX    R2,MVPARM
MVPARM   MVC   PARM(0),2(R1)           ISOLATE THE PARM STRING
         SPACE
NOPARM   DS    0H
         SPACE
***********************************************************************
* GET SOME STORAGE FOR THE USER/GROUP TREE                            *
***********************************************************************
         SPACE
         GETMAIN R,LV=TREELEN
         ST    R1,TREEADDR             SAVE ADDRESS OF STORAGE
         ST    R1,NEXTFREE             SET NEXT SLOT ADDRESS
         A     R1,=AL4(TREELEN)        CALC END ADDR
         ST    R1,TREEFIN              SAVE END ADDRESS
         SPACE
***********************************************************************
* GET SOME STORAGE FOR THE ICHEINTY WORK AREA                         *
***********************************************************************
         SPACE
         GETMAIN R,LV=WKALEN
         ST    R1,WKAREA
         L     R2,=AL4(WKALEN)
         ST    R2,0(R1)
         SPACE
***********************************************************************
* GET SOME STORAGE FOR THE RULE STORAGE (ABOVE THE LINE)              *
***********************************************************************
         SPACE
         GETMAIN R,LV=RULARL,LOC=ABOVE
         ST    R1,RULENEXT
         ST    R1,RULEFRST
         SPACE
***********************************************************************
* GET SOME STORAGE FOR THE RULE POINTERS (ABOVE THE LINE)             *
*                                                                     *
*    RULE POINTERS ARE 12 BYTES LONG AND ARE USED TO CHAIN RULES      *
*    OFF A USER/GROUP ENTRY.                                          *
*                                                                     *
*        0 - 3  : -> RULE ENTRY                                       *
*        4 - 7  : -> NEXT RULE POINTER (0 = END)                      *
*            8  : ACCESS TYPE                                         *
*        9 - 11 : SPARE                                               *
*                                                                     *
***********************************************************************
         SPACE
         GETMAIN R,LV=RPLEN,LOC=ABOVE
         ST    R1,RPNEXT
***********************************************************************
* GET SOME STORAGE FOR THE RECURSION STACK                            *
***********************************************************************
         SPACE
         GETMAIN R,LV=STACKL
         ST    R1,STACK
         SPACE
         SMODE 24
         OPEN  (SYSPRINT,(OUTPUT))
         SPACE
         BAL   R9,PUTHEAD
         SPACE
         SMODE 31
         SPACE
***********************************************************************
* BUILD A TREE OF ALL RACF USERS AND GROUPS                           *
***********************************************************************
         SPACE
         BAL   R9,BLDTREE              GO BUILD THE TREE
         EJECT
         SPACE
***********************************************************************
* PROCESS ALL THE GENERAL RESOURCE RULES                              *
***********************************************************************
         SPACE
         LA    R2,GENTAB               -> GENERAL RESOURCE TABLE
         SPACE
PROCGEN  DS    0H
         CLI   0(R2),X'FF'             END OF TABLE ?
         BE    GENEND                  YES
         SPACE
         XC    UGAREA,UGAREA           START AT FIRST ENTRY
         MVI   UGAREA,X'01'
         L     R3,WKAREA
PROCGEN1 DS    0H
         SPACE
         TM    10(R3),X'80'            WAS LAST ENTRY GENERIC ?
         BNO   PROCGEN2                NO
         XC    4(30,R3),4(R3)          CLEAR THE WORK AREA
         ICHEINTY NEXT,                                                C
               TYPE='GEN',                                             C
               ENTRY=UGAREA,                                           C
               CLASS=(R2),                                             C
               GENERIC=UNCOND,                                         C
               WKAREA=(R3),                                            C
               ACTIONS=(ACTGEN1,ACTGEN2)
         SPACE
         B     PROCGEN3
         SPACE
PROCGEN2 DS    0H
         XC    4(30,R3),4(R3)          CLEAR THE WORK AREA
         ICHEINTY NEXT,                                                C
               TYPE='GEN',                                             C
               ENTRY=UGAREA,                                           C
               CLASS=(R2),                                             C
               WKAREA=(R3),                                            C
               GENERIC=NO,                                             C
               ACTIONS=(ACTGEN1,ACTGEN2)
         SPACE
PROCGEN3 DS    0H
         LTR   R15,R15
         BNZ   NEXTGEN
         SPACE
         L     R7,RULENEXT             -> STORAGE TO BUILD RULE IN
         ST    R7,RULEPTR              SAVE AS CURRENT RULE
         LA    R8,RULETL(,R7)          -> NEXT SLOT
         ST    R8,RULENEXT             STORE FOR NEXT TIME
         SPACE
         USING RULET,R7
         MVC   RULECL,0(R2)            MOVE IN CLASS NAME
         MVC   RULENM,UGAREA                   RULE NAME
         MVI   RULETYP,C' '            INDICATE NOT GENERIC
         TM    10(R3),X'80'            IS IT GENERIC ?
         BNO   NOTGGEN                 NO
         MVI   RULETYP,C'G'            YES, INDICATE SO
         SPACE
NOTGGEN  DS    0H
         SPACE
         DROP  R7
         SPACE
***********************************************************************
* CHECK THAT ALL THE USERS AND GROUPS IN THE ACCESS LIST EXIST.       *
***********************************************************************
         SPACE
         LH    R4,28(R3)               GET LENGTH OF USER/GROUP LIST
         LTR   R4,R4                   NULL LIST ?
         BZ    PROCGEN1                YES, GET THE NEXT RESOURCE NAME
         LA    R5,30(R3)               -> FIRST ACTION RETURN AREA
         AR    R5,R4                   -> LENGTH OF SECOND AREA
         LA    R5,2(R5)                -> FIRST ACCESS BYTE
         ST    R5,ACCPTR               SAVE FOR LATER
         SRL   R4,3                    CALC NO. OF USER/GROUPS
         LA    R5,30(R3)               -> FIRST USER/GROUP
         SPACE
CHKACC   DS    0H
         BAL   R9,LOOKUP               LOOKUP THE USER/GROUP
         LTR   R15,R15                 FOUND ?
         BNZ   GENERR1                 NO, WRITE OUT THE ERROR MESSAGE
         BAL   R9,ADDRULE              YES, GO ADD RULE TO USER/GROUP
         B     NEXTACC                 FIND THE NEXT ACCESS ENTRY
         SPACE
GENERR1  DS    0H
         BAL   R9,ERROR1               PRINT THE ERROR
         SPACE
NEXTACC  DS    0H
         L     R12,ACCPTR
         LA    R12,1(R12)
         ST    R12,ACCPTR              -> NEXT ACCESS FLAG
         LA    R5,8(R5)                -> NEXT ACCESS NAME
         BCT   R4,CHKACC               GO CHECK IT
         SPACE
         B     PROCGEN1                CARRY ON FOR THIS CLASS
         SPACE
NEXTGEN  DS    0H
         LA    R2,8(R2)                -> NEXT CLASS NAME
         B     PROCGEN                 GO PROCESS IT
GENEND   DS    0H
         SPACE
***********************************************************************
* PROCESS ALL THE DATASET RESOURCE RULES                              *
***********************************************************************
         SPACE
         XC    UGAREA,UGAREA           START AT FIRST ENTRY
         MVI   UGAREA,X'01'
         L     R3,WKAREA
         LA    R2,=C'DATASET '         FAKE THE CLASS NAME
PROCDS   DS    0H
         TM    10(R3),X'80'            LAST ENTRY GENERIC ?
         BNO   PROCDSNG                NO, USE GENERIC=NO
         SPACE
         XC    4(30,R3),4(R3)          CLEAR THE WORK AREA
         ICHEINTY NEXTC,                                               C
               TYPE='DS',                                              C
               ENTRY=UGAREA,                                           C
               WKAREA=(R3),                                            C
               GENERIC=UNCOND,                                         C
               ACTIONS=(ACTGEN1,ACTGEN2)
         SPACE
         B     CHKPDS
         SPACE
PROCDSNG EQU   *
         XC    4(30,R3),4(R3)          CLEAR THE WORK AREA
         ICHEINTY NEXTC,                                               C
               TYPE='DS',                                              C
               ENTRY=UGAREA,                                           C
               WKAREA=(R3),                                            C
               GENERIC=NO,                                             C
               ACTIONS=(ACTGEN1,ACTGEN2)
         SPACE
CHKPDS   DS    0H
         LTR   R15,R15                 END OF DS RULES ?
         BNZ   REPOUT                  YES, GO PRODUCE THE REPORT
         SPACE
         L     R7,RULENEXT             -> STORAGE TO BUILD RULE IN
         ST    R7,RULEPTR              SAVE AS CURRENT RULE
         LA    R8,RULETL(,R7)          -> NEXT SLOT
         ST    R8,RULENEXT             STORE FOR NEXT TIME
         SPACE
         USING RULET,R7
         MVC   RULECL,0(R2)            MOVE IN CLASS NAME
         MVC   RULENM,UGAREA                   RULE NAME
         MVI   RULETYP,C' '            INDICATE NOT GENERIC
         TM    10(R3),X'80'            IS IT GENERIC ?
         BNO   NOTGDSN                 NO
         MVI   RULETYP,C'G'            YES, INDICATE SO
         SPACE
NOTGDSN  DS    0H
         SPACE
         DROP  R7
         SPACE
***********************************************************************
* CHECK THAT ALL THE USERS AND GROUPS IN THE ACCESS LIST EXIST.       *
***********************************************************************
         SPACE
         LH    R4,28(R3)               GET LENGTH OF USER/GROUP LIST
         LTR   R4,R4                   ANY ENTRIES ?
         BZ    PROCDS                  NO, SKIP THIS ONE
         LA    R5,30(R3)               -> FIRST ACTION RETURN AREA
         AR    R5,R4                   -> LENGTH OF SECOND AREA
         LA    R5,2(R5)                -> FIRST ACCESS BYTE
         ST    R5,ACCPTR               SAVE FOR LATER
         SRL   R4,3                    CALC NO. OF USER/GROUPS
         LA    R5,30(R3)               -> FIRST USER/GROUP
         SPACE
CHKDACC  DS    0H
         BAL   R9,LOOKUP               LOOKUP THE USER/GROUP
         LTR   R15,R15                 FOUND ?
         BNZ   DAERR1                  NO, ISSUE ERROR MESSAGE
         SPACE
         BAL   R9,ADDRULE              ADD RULE TO USER/GROUP NODE
         B     NEXTDACC                CHECK THE NEXT ONE
         SPACE
DAERR1   DS    0H
         BAL   R9,ERROR1               PRINT THE ERROR
         SPACE
NEXTDACC DS    0H
         L     R12,ACCPTR              GET THE CURRENT ACCESS POINTER
         LA    R12,1(R12)              BUMP TO THE NEXT ONE
         ST    R12,ACCPTR              TUCK IT AWAY FOR LATER
         LA    R5,8(R5)                -> NEXT ACCESS NAME
         BCT   R4,CHKDACC              GO CHECK IT
         B     PROCDS                  GET NEXT DATSET ENTRY
         SPACE
REPOUT   DS     0H
         SPACE
***********************************************************************
* PRINT OUT THE CROSS REFERENCE REPORT                                *
***********************************************************************
         SPACE
         L     R2,STACK                -> RECURSION STACK
         L     R8,TREEADDR             -> TOP LEVEL NODE
         SPACE
         PERFORM TPRINT,R8             START PRINTING
         SPACE
         CLOSE (SYSPRINT)
         L     R13,4(R13)
         RETURN (14,12),RC=0
         EJECT
BLDTREE  DS    0H
         SPACE
***********************************************************************
* BUILD THE USER/GROUP TREE                                           *
***********************************************************************
         SPACE
         L     R3,WKAREA               -> EINTY WORK AREA
         XC    UGAREA,UGAREA           CLEAR UGAREA
         MVI   UGAREA,X'01'            GIVE IT A LENGTH (AVOID S730)
         MVI   BLDTYPE,C'U'            WE ARE BUILDING USERS
BLDUSER  DS    0H
         SPACE
***********************************************************************
* BUILD USER TREE                                                     *
***********************************************************************
         SPACE
         ICHEINTY NEXT,                                                C
               TYPE='USR',                                             C
               ENTRY=UGAREA,                                           C
               WKAREA=(R3)
         LTR   R15,R15                 AN ENTRY RETURNED ?
         BNZ   BLDGROUP                NO, GO BUILD GROUPS
         SPACE
         BAL   R8,TREEADD              GO ADD TO TREE
         SPACE
         B     BLDUSER                 CARRY ON BUILDING
         SPACE
BLDGROUP DS    0H
         L     R3,WKAREA               -> EINTY WORK AREA
         XC    UGAREA,UGAREA           CLEAR UGAREA
         MVI   UGAREA,X'01'
         MVI   BLDTYPE,C'G'            WE ARE BUILDING GROUPS
         SPACE
BLDGRP   DS    0H
***********************************************************************
* ADD GROUP ENTRIES                                                   *
***********************************************************************
         SPACE
         ICHEINTY NEXT,                                                C
               TYPE='GRP',                                             C
               ENTRY=UGAREA,                                           C
               WKAREA=(R3)
         LTR   R15,R15                 AN ENTRY RETURNED ?
         BNZR  R9                      NO, ALL DONE
         SPACE
         BAL   R8,TREEADD              GO ADD TO TREE
         SPACE
         B     BLDGRP                  CARRY ON BUILDING
         EJECT
         SPACE
***********************************************************************
*                                                                     *
*  LOOKUP : CHECK IF A USER/GROUP IS IN THE TREE                      *
*                                                                     *
*           R5 -> EIGHT BYTE NAME                                     *
*                                                                     *
*           ON EXIT R15 = 0 IF FOUND                                  *
*                         4 IF NOT FOUND                              *
*                                                                     *
***********************************************************************
         SPACE
LOOKUP   DS    0H
         LA    R15,4                   ASSUME NOT FOUND
         L     R6,FIRSTNDE             -> THE FIRST NODE
LOOKUP1  DS    0H
         LTR   R6,R6                   END OF NODE SEARCH ?
         BZR   R9                      YES, NOT FOUND
         SPACE
         USING UGENTRY,R6
         CLC   0(8,R5),UGNAME          FOUND IT ?
         BE    LOOKUP9                 YES, RETURN WITH GOOD NEWS
         SPACE
         BL    LOOKUP2                 < GO LEFT
         SPACE
         L     R6,UGRIGHT              > GO RIGHT
         B     LOOKUP1                 KEEP ON TRUCKING
         SPACE
LOOKUP2  DS    0H
         L     R6,UGLEFT               -> LEFT NODE
         B     LOOKUP1                 CHECK IT OUT (AT TESCO'S)
         SPACE
LOOKUP9  DS    0H
         SR    R15,R15                 INDICATE FOUND
         BR    R9                      RETURN TO CALLER
         SPACE
         DROP  R6
         EJECT
***********************************************************************
* ADD A RESOURCE RULE TO A USER OR GROUP NODE ENTRY                   *
*                                                                     *
*        R6      -> USER/GROUP NODE                                   *
*        RULEPTR -> THE RULE ENTRY                                    *
*                                                                     *
***********************************************************************
         SPACE
ADDRULE  DS    0H
         L     R7,RULEPTR              -> CURRENT RULE
         USING UGENTRY,R6
         L     R8,UGRULE               GET ADDRESS OF FIRST RULE
         LTR   R8,R8                   IS THERE ONE ?
         BNZ   ADDRULE1                YES, SCAN ON
         L     R1,RPNEXT               -> NEXT RULE PTR ENTRY
         ST    R1,UGRULE               NO, THERE IS NOW !
         MVC   0(4,R1),RULEPTR         MOVE IN RULE ADDRESS
         L     R12,ACCPTR              -> ACCESS BYTE
         MVC   8(1,R1),0(R12)          MOVE INTO THE RULE PTR
         XC    4(4,R1),4(R1)           CLEAR FORWARD CHAIN
         LA    R1,12(,R1)              -> NEXT PTR SLOT
         ST    R1,RPNEXT               SAVE IT
         BR    R9                      RETURN TO CALLER
ADDRULE1 DS    0H
         CLC   4(4,R8),=F'0'           END OF RULE CHAIN ?
         BNE   ADDRULE2                NO, SCAN ON
         L     R1,RPNEXT               -> NEXT RULE PTR ENTRY
         ST    R1,4(R8)                CHAIN IT TO CURRENT
         MVC   0(4,R1),RULEPTR         MOVE IN RULE ADDRESS
         L     R12,ACCPTR              -> ACCESS BYTE
         MVC   8(1,R1),0(R12)          MOVE INTO THE RULE PTR
         XC    4(4,R1),4(R1)           CLEAR FORWARD CHAIN
         LA    R1,12(,R1)              -> NEXT PTR SLOT
         ST    R1,RPNEXT               SAVE IT
         BR    R9                      EXIT TO CALLER
         SPACE
ADDRULE2 DS    0H
         L     R8,4(R8)                -> NEXT RULE POINTER
         B     ADDRULE1                AND CHECK IT OUT
         SPACE
         DROP  R6
         EJECT
ERROR1   DS    0H
         CLC   PARML,=H'0'            A PARM SPECIFIED ?
         BNER  R9                     YES, NO ERROR MESSAGE THEN
         SPACE
         ST    R9,ESAVE9
         MVI   LINE,C' '
         MVC   LINE+1(132),LINE
         SPACE
         MVC   LINE+1(8),0(R5)
         MVC   LINE+10(L'EMSG1),EMSG1
         MVC   LINE+10+L'EMSG1(8),0(R2) MOVE IN CLASS NAME
         MVC   LINE+10+L'EMSG1+8(6),=C',RULE='
         SR    R6,R6
         IC    R6,UGAREA
         BCTR  R6,0
         EX    R6,ERROR1M
ERROR1M  MVC   LINE+10+L'EMSG1+8+6(0),UGAREA+1
         BAL   R9,PRINT
         L     R9,ESAVE9
         BR    R9
         SPACE
ESAVE9   DS    F
         SPACE
***********************************************************************
* TREEADD - ADD AN ENTRY TO THE TREE                                  *
***********************************************************************
         SPACE
TREEADD  DS    0H
         SPACE
***********************************************************************
* IF A PARM WAS PASSED TO THIS PROGRAM, CHECK IF WE HAVE A MATCH      *
***********************************************************************
         SPACE
         LH    R4,PARML                GET THE PARAMETER LEN
         LTR   R4,R4                   IS THERE ONE ?
         BZ    TREEADD0                NO, SKIP TEST
         BCTR  R4,0                    -1 FOR EXECUTE
         EX    R4,PARMCHK              COMPARE PARM WITH USER/GROUP
         BNER  R8                      EXIT IF NO MATCH
         SPACE
TREEADD0 DS    0H
         L     R4,NEXTFREE             ADDR NEXT FREE NODE
         C     R4,TREEFIN              TABLE FULL ?
         BNL   TREEFULL                YES, GO ABEND
         SPACE
         LA    R5,UGELEN(,R4)          SET THE NEXT FREE ADDR
         ST    R5,NEXTFREE             AND SAVE
         SPACE
         USING UGENTRY,R4
         MVI   UGTYPE,UGUSER           ASSUME A USER ENTRY
         CLI   BLDTYPE,C'U'            IS IT ?
         BE    TREEADD1                YES
         MVI   UGTYPE,UGGROUP          NO, A GROUP
TREEADD1 DS    0H
         MVC   UGNAME,=CL8' '          BLANK OUT THE NAME
         SR    R6,R6
         IC    R6,UGAREA               GET LENGTH OF NAME
         BCTR  R6,0
         EX    R6,MVNAME
MVNAME   MVC   UGNAME(0),UGAREA+1
         XC    UGLEFT(12),UGLEFT       CLEAR THE NODE POINTERS
         SPACE
         L     R5,FIRSTNDE             GET ADDRESS OF FIRST NODE
         LTR   R5,R5                   ONE BUILT YET ?
         BNZ   TREEADD2                YES
         ST    R4,FIRSTNDE             NO, BUILD IT
         BR    R8                      AND EXIT
         SPACE
         DROP  R4
         USING UGENTRY,R5
TREEADD2 DS    0H
         CLC   4(8,R4),UGNAME          COMPARE WITH CURRENT NODE
         BL    TREEADD3                < GO LEFT
         BH    TREEADD4                > GO RIGHT
         ABEND 1,DUMP                  = (SHOULD NOT OCCURR)
         SPACE
TREEADD3 EQU   *
         L     R6,UGLEFT               -> LEFT NODE
         LTR   R6,R6                   IS THERE ONE ?
         BNZ   TREEADD5                YES, SCAN IT
         ST    R4,UGLEFT               NO, ADD THE NEW ONE
         BR    R8                      EXIT
TREEADD4 EQU   *
         L     R6,UGRIGHT              -> RIGHT NODE
         LTR   R6,R6                   IS THERE ONE ?
         BNZ   TREEADD5                YES, SCAN IT
         ST    R4,UGRIGHT              NO, ADD THE NEW ONE
         BR    R8                      EXIT
         SPACE
TREEADD5 DS    0H
         LR    R5,R6
         B     TREEADD2                COMPARE AT THIS LEVEL
         SPACE
         DROP  R5
         SPACE
TREEFULL DS    0H
         WTO   'RACFXREF - TREE STORAGE OVERFLOW'
         ABEND 2,DUMP
         SPACE
PARMCHK  CLC   PARM(0),UGAREA+1
         EJECT
         SPACE
***********************************************************************
* TPRINT - RECURSIVE TREE PRINT ROUTINE                               *
***********************************************************************
         SPACE
TPRINT   DS    0H
         USING UGENTRY,R8
         L     R7,UGLEFT               -> LEFT NODE
         LTR   R7,R7                   IS THERE ONE ?
         BZ    TPRINT2                 NO
         SPACE
         PERFORM TPRINT,R7             YES, PROCESS IT
         SPACE
TPRINT2  DS    0H
         SPACE
***********************************************************************
* PRINT THE INFORMATION FOR THIS NODE IF IT HAS EXPLICIT RULES        *
***********************************************************************
         SPACE
         CLC   UGRULE,=F'0'            HAS THIS USER/GROUP ANY RULES ?
         BE    TPRINT3                 NO, SKIP THE PRINT OF IT
         SPACE
         BAL   R9,NPRINT               YES, GO PRINT THE BIZ
         SPACE
TPRINT3  DS    0H
         L     R7,UGRIGHT              -> RIGHT NODE
         LTR   R7,R7                   IS THERE ONE ?
         BZ    TPRINT9                 NO, SKIP IT
         SPACE
         PERFORM TPRINT,R7             YES, RECURSE TO THIS LEVEL
         SPACE
TPRINT9  DS   0H
         EXIT                          EXIT TO CALLER
         EJECT
         SPACE
***********************************************************************
* NPRINT - PRINT INFORMATION ABOUT A USER/GROUP NODE                  *
***********************************************************************
         SPACE
NPRINT   DS    0H
         USING UGENTRY,R8
         ST    R9,NSAVE9
         SPACE
         MVI   LINE,C'0'               SKIP TWO LINES
         TM    UGTYPE,UGGROUP          IS THIS A GROUP NODE ?
         BNO   NPRINT2                 NO, TIS A PUNTER
         MVC   LINE+1(7),=C'GROUP :'
         MVC   LINE+9(8),UGNAME
         B     NPRINT3
NPRINT2  DS    0H
         MVC   LINE+1(6),=C'USER :'
         MVC   LINE+8(8),UGNAME
         SPACE
NPRINT3  DS    0H
         BAL   R9,PRINT
         SPACE
***********************************************************************
* PRINT ALL THE RULES THIS USER/GROUP IS ACCESSED TO                  *
***********************************************************************
         SPACE
         L     R7,UGRULE               -> FIRST RULE PTR BLOCK
         MVI   LINE,C'0'               SPACE THE FIRST ONE OUT
NPRINT4  DS    0H
         L     R5,0(R7)                 -> RULE ENTRY
         USING RULET,R5
         MVC   LINE+11(6),=C'CLASS='
         MVC   LINE+17(8),RULECL
         MVC   LINE+26(7),=C'ACCESS='
         LA    R4,ACCTAB
NPRINT4A CLI   0(R4),X'FF'
         BE    NPRINT4B
         CLC   0(1,R4),8(R7)            ACCESS MATCH ?
         BE    NPRINT4B                 YES
         LA    R4,9(R4)                 -> NEXT TABLE ENTRY
         B     NPRINT4A
NPRINT4B DS    0H
         MVC   LINE+33(8),1(R4)
         MVC   LINE+41(5),=C'RULE='
         SR    R4,R4
         IC    R4,RULENM
         BCTR  R4,0
         EX    R4,NPRINT5
NPRINT5  MVC   LINE+46(0),RULENM+1
         SPACE
         CLI   RULETYP,C'G'             IS IT A GENERIC RULE ?
         BNE   NPRINT6                  NO
         SPACE
         LA    R9,LINE+46
         LA    R9,2(R4,R9)
         MVC   0(3,R9),=C'(G)'          YES, INDICATE SO
         SPACE
NPRINT6  DS    0H
         BAL   R9,PRINT
         SPACE
         L     R7,4(R7)
         LTR   R7,R7
         BNZ   NPRINT4
         SPACE
         L     R9,NSAVE9
         BR    R9
         SPACE
NSAVE9   DS    F
         EJECT
PRINT    DS    0H
         SMODE 24
         ST    R9,PRINTS9
         LH    R9,LINEC
         LA    R9,1(R9)
         CLI   LINE,C'0'
         BNE   NOSKIP2
         LA    R9,1(,R9)
NOSKIP2  DS    0H
         STH   R9,LINEC
         CH    R9,=H'60'
         BNH   NOHEAD
         BAL   R9,PUTHEAD
NOHEAD   DS    0H
         PUT   SYSPRINT,LINE
         MVI   LINE,C' '
         MVC   LINE+1(132),LINE
         SMODE 31
         L     R9,PRINTS9
         BR    R9
         SPACE
PRINTS9  DS    F
         SPACE
PUTHEAD  DS    0H
         MVC   LINEC,=H'4'
         PUT   SYSPRINT,HEAD1
         MVI   LINE,C'0'
         BR    R9
         EJECT
ACTGEN1  ICHEACTN FIELD=USERID,MF=L
ACTGEN2  ICHEACTN FIELD=USERACS,MF=L
         SPACE
GENTAB   DS    0H
         SPACE
***********************************************************************
* THIS TABLE CONTAINS THE NAMES OF ALL RACF GENERAL RESOURCE CLASSES  *
* THAT ARE TO BE INCLUDED IN THE CROSS-REFERENCE REPORT.              *
***********************************************************************
         SPACE
         DC    C'JESSPOOL'             JES
         DC    C'TCICSTRN'             CICS TRANSACTION ENTRIES
         DC    C'GCICSTRN'             CICS TRANSACTION GROUPS
         DC    C'PCICSPSB'             CICS PSB ENTRIES
         DC    C'QCICSPSB'             CICS PSB GROUPS
         DC    C'PROGRAM '             PROGRAM PROTECTION
         DC    C'APPL    '             APPLICATIONS
         DC    C'FACILITY'             FACILITY CLASS
         DC    C'SDSF    '             SDSF
         DC    C'OPERCMDS'             OPERATOR COMMANDS
         DC    C'SURROGAT'             SURROGAT USER
         DC    X'FF'                   <-- END OF TABLE
         SPACE
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),LRECL=133,          X
               BLKSIZE=133,RECFM=FA
         SPACE
ACCTAB   DS    0H
         DC    X'01',CL8'NONE'
         DC    X'02',CL8'N/A'
         DC    X'04',CL8'N/A'
         DC    X'08',CL8'N/A'
         DC    X'10',CL8'READ'
         DC    X'20',CL8'UPDATE'
         DC    X'40',CL8'CONTROL'
         DC    X'80',CL8'ALTER'
         DC    X'FF',CL8'OOPS'
         SPACE
HEAD1    DC    CL133'1RACFXREF - RACF RULE XREF AND CHECKER PROGRAM V1 X
               (C) 1989 NUGGET SOFTWARE LIMITED'
EMSG1    DC    C'IN ACCESS LIST, BUT DOES NOT EXIST,CLASS='
LINE     DS    CL133
         SPACE
TREEADDR DS    F                       TREE STORAGE ADDRESS
NEXTFREE DS    F                       ADDR OF NEXT SLOT
TREEFIN  DS    F                       TREE STORAGE END ADDRESS
RULENEXT DS    F                       RULE STORAGE (NEXT)
RULEFRST DS    F                       RULE STORAGE (FIRST)
RULEPTR  DS    F                       RULE STORAGE (CURRENT)
RPNEXT   DS    F                       RULE POINTER (NEXT)
WKAREA   DS    F                       ADDR OF WORK AREA STORAGE
STACK    DS    F                       ADDRESS OF RECURSION STACK
ACCPTR   DS    F                       ACCESS FLAG POINTER
FIRSTNDE DC    F'0'
         SPACE
PARML    DS    H
PARM     DS    CL8                     PARM STRING
         SPACE
BLDTYPE  DS    X                       TREE BUILD TYPE
         SPACE
LINEC    DS    H                       LINE COUNTER
         SPACE
UGAREA   DS    CL256
         LTORG
         SPACE
UGENTRY  DSECT                         USER/GROUP TREE ENTRY
UGTYPE   DS    X                       TYPE OF ENTRY
UGUSER   EQU   X'80'                     '80' - USER
UGGROUP  EQU   X'40'                     '40' - GROUP
UGSPR1   DS    CL3                     SPARE
UGNAME   DS    CL8                     USER/GROUP NAME
UGLEFT   DS    A                       ADDR OF LEFT NODE
UGRIGHT  DS    A                       ADDR OF RIGHT NODE
UGRULE   DS    A                       ADDR OF USER RULES
UGELEN   EQU   *-UGENTRY
         SPACE
RULET    DSECT
RULECL   DS    CL8                     CLASS NAME
RULETYP  DS    CL1                     RULE TYPE 'G' = GENERIC
RULENM   DS    CL45                    RULE NAME
RULETL   EQU   *-RULET
         END
